// main.nf

nextflow.enable.dsl = 2

params.input_manifest = './wgs_snp_testdata.tsv'
params.resources_dir = "../resources"
params.called_sites = "${params.resources_dir}/AgamP4.allsites.nonN.zarr.zip"
params.phased_sites = "${params.resources_dir}/phased_sites_gamb_colu_arab.zarr.zip"
params.results = "../results"
params.phased_vcfs = "${params.results}/sample_phasing/*.gz"
params.interval_list = "${params.resources_dir}/intervals_gamb_colu_arab_3L_200000_40000.txt"


include { SelectVariants } from './modules/SelectVariants'
include { BgzipAndTabix } from './modules/BgzipAndTabix'
include { WhatsHapPhase } from './modules/WhatsHapPhase'
include { Tabix } from './modules/Tabix'
include { WhatsHapStats } from './modules/WhatsHapStats'
include { MergeVcfs } from './modules/MergeVcfs'
include { BgzipAndTabixII } from './modules/BgzipAndTabixII'
include { SHAPEIT } from './modules/SHAPEIT'
include { TabixII } from './modules/TabixII'
include { cohortVcfToZarr } from './modules/cohortVcfToZarr'


workflow {
    tsv_ch = channel
        .fromPath(params.input_manifest)
        .splitCsv(sep: "\t", header: true)
        .map { row -> tuple(row.sample_id, file(row.zarr_path)) }

    // Run SelectVariants to generate VCF files
    select_ch = SelectVariants(tsv_ch, file(params.called_sites), file(params.phased_sites))

    // Run BgzipAndTabix to compress and index the VCF files generated by SelectVariants
    compress_ch = BgzipAndTabix(select_ch.subset_vcf)

    tsv_ch2 = channel
        .fromPath(params.input_manifest)
        .splitCsv(sep: "\t", header: true)
        .map { row -> tuple(row.sample_id, file(row.bam_path), file(row.bai_path)) }

    // Run WhatsHapPhase to partially phase genotypes
    //tsv_ch2.view()
    phase_ch = WhatsHapPhase(tsv_ch2, compress_ch)

    // Run Tabix to index the phased VCF files 
    index_ch = Tabix(phase_ch)
	
    // Run WhatsHapStats to generate phasing statistics
    stats_vcf_ch = WhatsHapStats(phase_ch, index_ch) 

    // Run bcftools to merge phased VCF files into a single multi-sample VCF
    merge_ch = channel.fromPath(params.phased_vcfs, checkIfExists:true) \
        | map { file ->
          def parts = file.name.toString().tokenize('_')
          def key = parts[1].tokenize('.').get(0)
          return tuple(key, file)
        } \
        | groupTuple() \
        | MergeVcfs

    // Run BgzipAndTabix to compress and index the VCF files generated by SelectVariants
    compress_ch2 = BgzipAndTabixII(merge_ch.merged_vcf)

    // Run shapeit for cohort phasing
    regions_ch = Channel.fromPath(params.interval_list).splitText().map { it.trim().replace(":", "_") }
    //regions_ch.view()
    shapeit_ch = SHAPEIT(regions_ch, compress_ch2)
    
    // Run Tabix to index the phased VCF files by genomic region
    index_ch2 = TabixII(shapeit_ch)
   
    //Run cohortVcfToZarr to convert the final VCF to Zarr 
    cohortVcfToZarr(shapeit_ch) 

}
