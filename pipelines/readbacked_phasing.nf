nextflow.enable.dsl = 2

params.input_manifest = './wgs_snp_testdata.tsv'
params.resources_dir = "/home/elukyamuzi/vector_hap/resources"
params.called_sites = "${params.resources_dir}/AgamP4.allsites.nonN.zarr.zip"
params.phased_sites = "${params.resources_dir}/ag3_phased_sites_gamb_colu_arab.zarr.zip"
params.results = "/home/elukyamuzi/vector_hap/results"
chromosome_list = ['2R', '2L', '3R', '3L', 'X']


include { SelectVariants } from '../modules/SelectVariants'
include { BgzipAndTabix } from '../modules/BgzipAndTabix'
include { WhatsHapPhase } from '../modules/WhatsHapPhase'
include { Tabix } from '../modules/Tabix'
include { WhatsHapStats } from '../modules/WhatsHapStats'

workflow {
    tsv_ch = channel
        .fromPath(params.input_manifest)
        .splitCsv(sep: "\t", header: true)
        .map { row -> tuple(row.sample_id, file(row.zarr_path)) }

    contig_ch = Channel.fromList(chromosome_list)
    //contig_ch.view()

    // Cross product between samples and contigs
    sample_contig_ch = tsv_ch.combine(contig_ch)

    // Run SelectVariants to generate VCF files
    select_ch = SelectVariants(sample_contig_ch, file(params.called_sites), file(params.phased_sites))

    // Run BgzipAndTabix to compress and index the VCF files generated by SelectVariants
    compress_ch = BgzipAndTabix(select_ch.subset_vcf)    

    tsv_ch2 = channel
        .fromPath(params.input_manifest)
        .splitCsv(sep: "\t", header: true)
        .map { row -> tuple(row.sample_id, file(row.bam_path), file(row.bai_path)) }


    // Join channels on sample_id
    joined_ch = tsv_ch2.combine(compress_ch, by: 0)
    
    // Run WhatsHapPhase to partially phase genotypes
    phase_ch = WhatsHapPhase(joined_ch)

    // Run Tabix to index the phased VCF files
    index_ch = Tabix(phase_ch)

    // Run WhatsHapStats to generate phasing statistics
    stats_vcf_ch = WhatsHapStats(phase_ch, index_ch)	
}
